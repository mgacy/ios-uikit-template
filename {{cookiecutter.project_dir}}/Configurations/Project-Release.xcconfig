//
// Project-Release.xcconfig
//
// Generated by BuildSettingExtractor on 9/30/20
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "Project-Shared.xcconfig"

// Suggested by Xcode
//ENABLE_TESTABILITY = YES
//ONLY_ACTIVE_ARCH = YES



// Debug Information Format
// 
// The type of debug information to produce.
// 
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf-with-dsym



// Enable Testability
//
// When this setting is activated, the product will be built with options appropriate for
// running automated tests, such as making private interfaces accessible to the tests.
// This may result in tests running slower than they would without testability enabled.

ENABLE_TESTABILITY = YES



// Enable Foundation Assertions
// 
// Controls whether assertion logic provided by `NSAssert` is included in the
// preprocessed source code or is elided during preprocessing. Disabling assertions can
// improve code performance.

ENABLE_NS_ASSERTIONS = NO



MTL_ENABLE_DEBUG_INFO = NO



// Build Active Architecture Only
//
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.

ONLY_ACTIVE_ARCH = YES



// Swift Compilation Mode
// 
// This setting controls the way the Swift files in a module are rebuilt.
// 
// * Incremental: Only rebuild the Swift source files in the module that are out of
// date, running multiple compiler processes as needed.
// * Whole Module: Always rebuild all Swift source files in the module, in a single
// compiler process.

SWIFT_COMPILATION_MODE = wholemodule



// Swift Optimization Level
// 
// * None: Compile without any optimization. [-Onone]
// * Optimize for Speed: [-O]
// * Optimize for Size: [-Osize]
// * Whole Module Optimization: [-O -whole-module-optimization]

SWIFT_OPTIMIZATION_LEVEL = -O



// Validate Built Product
// 
// If enabled, perform validation checks on the product as part of the build process.

VALIDATE_PRODUCT = YES
